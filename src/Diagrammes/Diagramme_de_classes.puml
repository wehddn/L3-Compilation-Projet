@startuml
skinparam class {
BackgroundColor AliceBlue
ArrowColor DarkTurquoise
BorderColor Turquoise
}

skinparam stereotypeCBackgroundColor DarkTurquoise
skinparam stereotypeIBackgroundColor Magenta
skinparam stereotypeABackgroundColor Yellow

hide stereotype
hide empty member

package tds {
	class Symbole {
		+ Symbole(String type)
		+ Type getType()
		+ String toString()
	}
	Symbole --"1" Type

	class SymboleVar extends Symbole {
		# int deplacement
		+ SymboleVar(String type)
		+ int getDeplacement()
	}

	class SymboleFct extends Symbole {
		# String etiquette
		+ SymboleFct(String type, String etiquette)
		+ String getEtiquette()
	}

	abstract class Entree {
		# String nom
		+ Entree(String nom)
		+ String getNom()
		+ boolean equals(Object o)
		+ int hashCode()
		+ String toString()
	}

	class EntreeVar extends Entree {
		+ EntreeVar(String nom)
	}

	class EntreeFct extends Entree {
		+ EntreeFct(String nom, String... typeParametre)
		+ boolean equals(Object o)
		+ int hashCode()
	}
	EntreeFct --"*" String : typesParametres

	class Tds {
		- int TaillePille
		- Tds()
		+ static Tds getInstance()
		+ void ajouter(Entree e, Symbole s, int noLigne, int noColonne)
		+ Symbole identifier(Entree e, int noLigne, int noColonne)
		+ int getTaillePille()
		+ int augmenterTaillePille()
		+ String toString()
		+ void reset()
	}
	Tds --"1" Tds : static
	Tds --"*" Symbole
	Tds --"*" Entree

	enum Type {
		ENTIER, BOOLEEN, NONDEFINI
	}

}

package arbre {

	package expressions {

		abstract class Constante extends Expression {
			# String cste
			# Constante(String texte, int n, int m)
			+ void verifier()
			+ String toString()
		}

		class ConstanteEntiere extends Constante {
			+ ConstanteEntiere(String texte, int n, int m)
			+ String toMIPS()
			+ Type getType()
			+ String getValeur()
		}

		class ConstanteBooleene extends Constante {
			+ ConstanteBooleene(String valeur, int n, int m)
			+ String toMIPS()
			+ Type getType()
			+ String getValeur()
		}

		abstract class Expression extends ArbreAbstrait{
			# Expression(int n, int m)
			+ abstract Type getType()
			+ abstract String getValeur()
		}

		class Idf extends Expression {
			+ Idf(Entree e, int noLigne, int noColonne)
			+ void verifier()
			+ String toMIPS()
			+ Type getType()
			+ String getValeur()
			+ Symbole getSymbole()
			+ String getNom()
			+ String toString()
		}
		Idf --"1" Symbole
		Idf --"1" Entree

		class Fonction extends ArbreAbstrait {
			+ Fonction(EntreeFct e, Retourne r, int n, int n)
			+ void verifier()
			+ String toMIPS()
			+ void setBlocDInstructions(BlocDInstructions b)
		}

		Fonction --"1" EntreeFct
		Fonction --"1" SymboleFct
		Fonction --"1" Retourne
		Fonction --"1" BlocDeFonctions

		class AppelFonction extends Expression {
			+ Appel(Entree i, int n, int m)
			+ void verifier()
			+ String toMIPS()
			+ Type getType()
			+ String getValeur()
		}

		AppelFonction --"1" Entree
		AppelFonction --"1" SymboleFct

		Fonction --"1" Idf : identifiant
	}
	package instructions {

		class Affectation extends Instruction {
			+ Affectation(Idf idf, Expression exp, int noLigne, int noColonne)
			+ void verifier()
			+ String toMIPS()
			+ String toString()
		}

		Affectation --"1" Idf
		Affectation --"1" Expression

		class Ecrire extends Instruction{
			+ Ecrire (Expression e, int n, int m)
			+ void verifier()
			+ String toMIPS()
			+ String toString()
		}
		Ecrire --"1" Expression

		abstract class Instruction extends ArbreAbstrait{
  	 		# Instruction(int n, int m)
		}

		class Retourne extends Instruction{
			+ Retourne (Expression e, int n, int m)
			+ void verifier()
			+ String toMIPS()
			+ Type getType()
			+ String toString()
		}

		Retourne --"1" Expression
	}

	abstract class ArbreAbstrait {
   		# int noLigne
   		# int noColonne
   		# ArbreAbstrait(int n, int m)
	 	+ int getNoLigne()
	 	+ int getNoColonne()
   		+ abstract void verifier()
   		+ abstract String toMIPS()
	}

	class BlocDInstructions extends ArbreAbstrait {
		+ BlocDInstructions(int n, int m)
		+ void ajouter(Instruction i)
		+ void verifier()
		+ String toMIPS()
		+ String toString()
	}
	BlocDInstructions --"*" Instruction

	class Programme extends ArbreAbstrait {
		+ Programme(int n, int m)
		+ void verifier()
		+ String toMIPS()
		+ String toString()
		+ void setBlocDeFonctions(BlocDeFonctions b)
		+ void setBlocDInstructions(BlocDInstructions b)
	}

	Programme --"1" BlocDeFonctions : fonctions
	Programme --"1" BlocDInstructions

	class BlocDeFonctions extends ArbreAbstrait {
		# int TaillePille
		+ BlocDeFonctions(int n, int m)
		+ void verifier()		
		+ String toMIPS()
		+ void ajouter(Fonction F)
	}

	BlocDeFonctions --"*" Fonction

}

package exceptions {
	abstract class AnalyseException extends RuntimeException {
		# AnalyseException(String m)
	}

	class AnalyseLexicaleException extends AnalyseException {
		+ AnalyseLexicaleException(int ligne, int colonne, String m)
	}

	class AnalyseSyntaxiqueException extends AnalyseException {
		+ AnalyseSyntaxiqueException(String m)
		+ AnalyseSyntaxiqueException(int ligne, int col, String m)
	}

	class AnalyseSemantiqueException extends AnalyseException{
		+ AnalyseSemantiqueException(String m)
		+ AnalyseSemantiqueException(int ligne, int col, String m)
	}

	class DoubleDeclarationException extends AnalyseSemantiqueException {
		+ DoubleDeclarationException(int ligne, int colonne, String m)
	}

	class TypeNonConcordantException extends AnalyseSemantiqueException {
		+ TypeNonConcordantException(int ligne, int colonne, String m)
	}

	class VariableNonDefinieException extends AnalyseSemantiqueException {
		+ VariableNonDefinieException(int ligne, int colonne, String m)
	}

}
@enduml