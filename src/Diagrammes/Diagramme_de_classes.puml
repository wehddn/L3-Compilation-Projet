@startuml
skinparam class {
BackgroundColor AliceBlue
ArrowColor DarkTurquoise
BorderColor Turquoise
}

skinparam stereotypeCBackgroundColor DarkTurquoise
skinparam stereotypeIBackgroundColor Magenta
skinparam stereotypeABackgroundColor Yellow

hide stereotype
hide empty member

package tds {
	class Symbole {
		- int deplacement
		+ Symbole(Type type)
		+ Type getType()
		+ int getDeplacement()
		+ String toString()
	}
	Symbole --"1" Type

	class Tds {
		- int deplacementCourant
		- static Tds instance
		- Tds()
		+ static Tds getInstance()
		+ void ajouter(String nom, Symbole s, int noLigne, int noColonne)
		+ Symbole identifier(String nom, int noLigne, int noColonne)
		+ int getTailleZoneVariables()
		+ String toString()
		+ void reset()
	}
	Tds --"*" Symbole

	enum Type {
		ENTIER, BOOLEEN
	}
}

package arbre {

	package expressions {

		abstract class Constante extends Expression {
			# String cste
			# Constante(String texte, int n, int m)
			+ String toString()
		}

		class ConstanteEntiere extends Constante {
			+ ConstanteEntiere(String texte, int n, int m)
			+ String toMIPS()
			+ Type getType()
		}

		class ConstanteBooleene extends Constante {
			+ ConstanteBooleene(String valeur, int n, int m)
			+ String toMIPS()
			+ Type getType()
		}

		abstract class Expression extends ArbreAbstrait{
			# Expression(int n, int m)
			+ abstract Type getType()
		}

		class Idf extends Expression {
			- String nom
			+ Idf(String nom, int noLigne, int noColonne)
			+ void verifier()
			+ String toMIPS()
			+ Type getType()
			+ String toString()
		}
		Idf --"1" Symbole

	}
	package instructions {

		class Affectation extends Instruction {
			+ Affectation(Idf idf, Expression exp, int noLigne, int noColonne)
			+ void verifier()
			+ String toMIPS()
			+ String toString()
		}
		Affectation --"1" Idf
		Affectation --"1" Expression

		class Ecrire extends Instruction{
			+ Ecrire (Expression e, int , int m)
			+ void verifier()
			+ String toMIPS()
			+ String toString()
		}
		Ecrire --"1" Expression

		abstract class Instruction extends ArbreAbstrait{
  	 	# Instruction(int n, int m)
		}



	}

	abstract class ArbreAbstrait {
   # int noLigne
   # int noColonne
   # ArbreAbstrait(int n, int m)
	 + int getNoLigne()
   + abstract void verifier()
   + abstract String toMIPS()
	}

	class BlocDInstructions extends ArbreAbstrait {
		BlocDInstructions(int n)
		+ void ajouter(Instruction i)
		+ void verifier()
		+ void verifier()
		+ String toMIPS()
		+ String toString()
	}
	BlocDInstructions --"*" Instruction



}

package exceptions {
	abstract class AnalyseException extends RuntimeException {
		# AnalyseException(String m)
	}

	class AnalyseLexicaleException extends AnalyseException {
		+ AnalyseLexicaleException(int ligne, int colonne, String m)
	}

	class AnalyseSyntaxiqueException extends AnalyseException {
		+ AnalyseSyntaxiqueException(String m)
	}

	class AnalyseSemantiqueException extends AnalyseException{
		+ AnalyseSemantiqueException(String m)
	}

	class DoubleDeclarationException extends AnalyseSyntaxiqueException {
		+ DoubleDeclarationException(int ligne, int colonne, String m)
	}

	class TypeNonConcordantException extends AnalyseSemantiqueException {
		+ TypeNonConcordantException(int ligne, int colonne, String m, String n)
	}

	class VariableNonDefinieException extends AnalyseSemantiqueException {
		+ VariableNonDefinieException(int ligne, int colonne, String m)
	}

}
@enduml