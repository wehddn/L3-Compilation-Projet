@startuml
package expressions {
	class AppelFonction extends Expression {
		+ Appel(EntreeFct i, int ligne, int colonne, Expression... parametres)
		+ void verifier()
		+ String toMIPS()
		+ Type getType()
		+ String getCommentaire()
	}
	AppelFonction --"1" Entree
	AppelFonction --"1" Symbole
	AppelFonction --"*" Expressions : parametres



	abstract class Constante extends Expression {
		# String cste
		# Constante(String valeur, int ligne, int colonne)
		+ void verifier()
		+ String getCommentaire()
	}

	class ConstanteBooleene extends Constante {
		+ ConstanteBooleene(String valeur, int ligne, int colonne)
		+ String toMIPS()
		+ Type getType()
		+ String getCommentaire()
	}

	class ConstanteEntiere extends Constante {
		+ ConstanteEntiere(String valeur, int ligne, int colonne)
		+ String toMIPS()
		+ Type getType()
		+ String getCommentaire()
	}


	abstract class Expression extends ArbreAbstrait implements Typed{
		# Expression(int ligne, int colonne)
		+ abstract Type getType();
		+ abstract String getCommentaire()
	}

	class Idf extends Expression {
		+ Idf(Entree e, int ligne, int colonne)
		+ void verifier()
		+ String toMIPS()
		+ Type getType()
		+ SymboleVar getSymbole()
		+ String getPositionMIPS()
		+ String getCommentaire()
	}
	Idf --"1" Entree
	Idf --"1" Symbole

	abstract class Unaire extends Expression {
		+ Unaire(Expression exp, int ligne, int colonne)
	}
	Unaire --"1" Expression


	class Negation extends Unaire {
		+ Negation(Expression exp, int ligne, int colonne)
		+ void verifier()
		+ String toMIPS()
		+ Type getType()
		+ String getCommentaire()
	}

	class Moins extends Unaire {
		+ Moins(Expression exp, int ligne, int colonne)
		+ void verifier()
		+ String toMIPS()
		+ Type getType()
		+ String getCommentaire()
	}

	class Parentheses extends Unaire {
		+ Parentheses(Expression exp, int ligne, int colonne)
		+ void verifier()
		+ String toMIPS()
		+ Type getType()
		+ String getCommentaire()
	}

	abstract class Binaire extends Expression {

	}

	Binaire --"2" Expression

	class Fois extends Binaire {

	}

	class Plus extends Binaire {

	}


	class Inferieur extends Binaire {

	}

	class Equivaut extends Binaire {

	}

	class Different extends Binaire {

	}

	class Et extends Binaire {

	}

	class Ou extends Binaire {
		
	}
}
@enduml