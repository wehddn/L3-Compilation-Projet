package zoot.analyse ;

import java_cup.runtime.*;
import java.util.*;
import zoot.exceptions.*;

import zoot.arbre.expressions.*;
import zoot.arbre.instructions.*;
import zoot.arbre.*;
import zoot.tds.*;
import java.util.Map.Entry;
import java.util.AbstractMap.SimpleEntry;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;

        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)
                    m.append(" colonne : " + (s.right+1)) ;
            }

            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner).  */
terminal VARIABLES_T, FONCTIONS_T, DEBUT, FIN, ENTIER_T, BOOLEEN_T,
POINTVIRGULE, EGAL_T, REPETER_T, JUSQUA_T, FINREPETER_T, SI_T, ALORS_T, SINON_T,
FINSI_T, RETOURNE_T, ECRIRE_T, VRAI_T, FAUX_T, NON_T, MOINS_T, PLUS_T,
FOIS_T, INF_T, EQUIVAUT_T, DIFFERENT_T, ET_T, OU_T, VIRGULE_T, PARENTOUVERT_T,
PARENTFERME_T;
terminal String IDF_T, CSTENTIERE;
/* Non terminals used in the grammar section.  */
non terminal ArrayList<Expression> PAR_EFF, EXP_ETOILE;
non terminal Instruction INSTRUCTION;
non terminal Fonction FONCTION;
non terminal Expression EXP;
non terminal Retourne RETOURNE;
non terminal Ecrire ECRIRE;
non terminal Affectation AFFECT;
non terminal CONDITION;
non terminal BOUCLE;
non terminal OPER;
non terminal String TYPE;
non terminal Declaration VARIABLE;
non terminal ArrayList<Declaration> VARIABLE_PLUS, VARIABLES_FONC, PARAMETRES_FONC, VARIABLES_PROG;
non terminal Programme PROGRAMME;
non terminal BlocDeFonctions FONCTION_PLUS, FONCTIONS_PROG;
non terminal BlocDInstructions INSTRUCTION_PLUS, INSTRUCTIONS_PROG, INSTRUCTIONS_FONC, INSTRUCTIONS_COND;

/* Precedence section */


/* ----------------------------Grammar Section-------------------- */
start with PROGRAMME;

PROGRAMME ::= VARIABLES_PROG:v FONCTIONS_PROG:f INSTRUCTIONS_PROG:i
{:
    Programme prog = new Programme(vleft + 1, vright + 1);
    for (Declaration d : v) {
            SymboleVar symVar = d.getSymbole();
            EntreeVar entree = d.getEntree();
            symVar.setDeplacement(Tds.getInstance().getTaillePile());
            Tds.getInstance().augmenterTaillePile();
            Tds.getInstance().ajouter(entree, symVar, d.getLigne(), d.getColonne());
        }

    prog.setBlocDeFonctions(f);
    prog.setBlocDInstructions(i);
    RESULT = prog ;
:};

VARIABLES_PROG ::= VARIABLES_T VARIABLE_PLUS:vp
{:
    RESULT = vp;
:};

FONCTIONS_PROG ::= FONCTIONS_T FONCTION_PLUS:fp
{:
    RESULT = fp;
:};

INSTRUCTIONS_PROG ::= DEBUT INSTRUCTION_PLUS:ip FIN
{:
    RESULT = ip;
:};

INSTRUCTION_PLUS ::= INSTRUCTION_PLUS:ip INSTRUCTION:i
{:
    ip.ajouter(i);
    RESULT = ip;
:}|
INSTRUCTION:i
{:
    BlocDInstructions bi = new BlocDInstructions(ileft + 1, iright + 1);
    bi.ajouter(i);
    RESULT = bi;
:};

INSTRUCTION ::= AFFECT:a
{:
    RESULT = a;
:}| BOUCLE:b
{:

:}| CONDITION:c
{:

:}| ECRIRE:e
{:
    RESULT = e;
:};

VARIABLE_PLUS ::= VARIABLE_PLUS:vp VARIABLE:v
{:
    vp.add(v);
    RESULT = vp;
:}
|VARIABLE:v
{:
    ArrayList<Declaration> vp = new ArrayList();
    vp.add(v);
    RESULT = vp;
:};

VARIABLE ::= TYPE:type IDF_T:identifiant POINTVIRGULE
{:
    RESULT = new Declaration(type, identifiant, typeleft+1, typeright+1);
:};

FONCTION_PLUS ::= FONCTION_PLUS:fp FONCTION:f
{:
    fp.ajouter(f);
    RESULT = fp;
:}|FONCTION:f
{:
    BlocDeFonctions fp = new BlocDeFonctions(fleft + 1, fright + 1);
    fp.ajouter(f);
    RESULT = fp;
:};

FONCTION ::= TYPE:type IDF_T:id PARAMETRES_FONC:pf VARIABLES_FONC:vf INSTRUCTIONS_FONC:ifonc RETOURNE:r FIN
{:
    EntreeFct e = new EntreeFct(id, pf.stream().map(Declaration::getType).toArray(String[]::new));
    SymboleFct s = new SymboleFct(type, Tds.getInstance().getEtiquette(id));
    Tds.getInstance().ajouter(e, s, typeleft + 1, typeright + 1);
    Fonction f = new Fonction(e, r, typeleft + 1, typeright + 1);
    f.setBlocDInstructions(ifonc);

    Tds.getInstance().entreeBlocContruction();

    for (Declaration d : pf) {
        SymboleVar symVar = d.getSymbole();
        EntreeVar entree = d.getEntree();
        symVar.setDeplacement(Tds.getInstance().getTaillePile());
        Tds.getInstance().augmenterTaillePile();
        Tds.getInstance().ajouter(entree, symVar, d.getLigne(), d.getColonne());
    }

    for (Declaration d : vf) {
        SymboleVar symVar = d.getSymbole();
        EntreeVar entree = d.getEntree();
        symVar.setDeplacement(Tds.getInstance().getTaillePile());
        Tds.getInstance().augmenterTaillePile();
        Tds.getInstance().ajouter(entree, symVar, d.getLigne(), d.getColonne());
    }

    Tds.getInstance().sortieBlocConstruction();

    RESULT = f;
:};

PARAMETRES_FONC ::= PARENTOUVERT_T PARENTFERME_T
{:
    ArrayList<Declaration> pf = new ArrayList();
    RESULT = pf;
:}| PARENTOUVERT_T VARIABLE_PLUS:vp PARENTFERME_T
{:
    RESULT = vp;
:};

VARIABLES_FONC ::= VARIABLES_T
{:
    ArrayList<Declaration> pf = new ArrayList();
    RESULT = pf;
:}| VARIABLES_T VARIABLE_PLUS:vp
{:
    RESULT = vp;
:};

INSTRUCTIONS_FONC ::= DEBUT:d
{:
    BlocDInstructions bi = new BlocDInstructions(dleft + 1, dright + 1);
    RESULT = bi;
:}| DEBUT INSTRUCTION_PLUS:ip
{:
    RESULT = ip;
:};

AFFECT ::= IDF_T:id EGAL_T EXP:exp POINTVIRGULE
{:
    EntreeVar e = new EntreeVar(id);
    Idf idf = new Idf(e, idleft+1, idright+1);
    RESULT = new Affectation(idf, exp, idleft+1, idright+1);
:};

BOUCLE ::= REPETER_T INSTRUCTION_PLUS JUSQUA_T EXP:e FINREPETER_T
{:
// TODO
    RESULT = new Ecrire(e, eleft + 1, eright);
:};

CONDITION ::= SI_T EXP:e INSTRUCTIONS_COND SINON_T INSTRUCTION_PLUS FINSI_T
{:
// TODO
    RESULT = new Ecrire(e, eleft + 1, eright);
:}|SI_T EXP:e INSTRUCTIONS_COND FINSI_T
{:
// TODO
    RESULT = new Ecrire(e, eleft + 1, eright);
:};

INSTRUCTIONS_COND ::= ALORS_T | ALORS_T INSTRUCTION_PLUS;

ECRIRE ::= ECRIRE_T EXP:e POINTVIRGULE
{:
    RESULT = new Ecrire(e, eleft + 1, eright + 1);
:};

RETOURNE ::= RETOURNE_T EXP:e POINTVIRGULE
{:
    RESULT = new Retourne(e, eleft + 1, eright);
:};

EXP ::= IDF_T:i PAR_EFF:p
{:
    EntreeFct e = new EntreeFct(i);
    RESULT = new AppelFonction(e, ileft + 1, iright+1, p.toArray(new Expression[0])) ;
:}|
CSTENTIERE:c
{:
    RESULT = new ConstanteEntiere(c, cleft + 1, cright+1) ;
:}|
IDF_T:i
{:
    EntreeVar e = new EntreeVar(i);
    RESULT = new Idf(e, ileft + 1, iright+1) ;
:}|
VRAI_T:v
{:
    RESULT = new ConstanteBooleene("vrai", vleft + 1, vright+1) ;
:}|
FAUX_T:f
{:
    RESULT = new ConstanteBooleene("faux", fleft + 1, fright+1) ;
:}|
PARENTOUVERT_T EXP:e PARENTFERME_T
{:
    RESULT = e;
:}|
NON_T EXP|
MOINS_T EXP
    /**|
    EXP OPER EXP**/;

EXP_ETOILE ::= EXP_ETOILE:exp VIRGULE_T EXP:e
{:
    exp.add(e);
    RESULT = exp;
:}| VIRGULE_T EXP:e
{:
    ArrayList<Expression> exp = new ArrayList<>(1);
     exp.add(e);
     RESULT = exp;
:};

OPER ::= PLUS_T | FOIS_T | INF_T | EQUIVAUT_T | DIFFERENT_T | ET_T | OU_T;

PAR_EFF ::= PARENTOUVERT_T PARENTFERME_T
{:
    RESULT = new ArrayList<Expression>(0);
:}| PARENTOUVERT_T EXP:e PARENTFERME_T
{:
     ArrayList<Expression> exp = new ArrayList<>(1);
     exp.add(e);
     RESULT = exp;
 :}| PARENTOUVERT_T EXP:e EXP_ETOILE:exp PARENTFERME_T
{:
    exp.add(0,e);
    RESULT = exp;
:};

TYPE ::= ENTIER_T {:RESULT = "entier";:} | BOOLEEN_T {:RESULT = "booleen";:};