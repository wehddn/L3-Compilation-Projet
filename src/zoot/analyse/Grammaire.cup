package zoot.analyse ;

import java.util.*;
import zoot.arbre.* ;
import zoot.arbre.expressions.* ;
import zoot.arbre.instructions.* ;
import zoot.tds.* ;
import zoot.exceptions.*;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;

        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)
                    m.append(" colonne : " + (s.right+1)) ;
            }

            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner).  */

terminal Symbol    VARIABLES, DEBUT, FIN, POINTVIRGULE, ECRIRE, EGAL, FONCTIONS, RETOURNE, PRNT_G, PRNT_D;
terminal String    CSTENTIERE, CBOOL, IDF, ENTIER, BOOLEEN;

/* Non terminals used in the grammar section.  */

non terminal Programme PROG;
non terminal Instruction INST;
non terminal Expression EXP;
non terminal String TYPE;
non terminal Fonction FONC;
non terminal Retourne RET;
non terminal BlocDeFonctions LFONC;
non terminal BlocDInstructions LINST, LINSTF;
non terminal LDEC, DECL, PARAM;

/* ----------------------------Grammar Section-------------------- */

start with PROG ;

PROG        ::= VARIABLES:v  LDEC:ld  FONCTIONS  LFONC:lf DEBUT  LINST:li  FIN
                {:
                    Tds.getInstance().entreeBloc();
                    Programme prog = new Programme(vleft + 1, vright + 1);
                    prog.setBlocDeFonctions(lf);
                    prog.setBlocDInstructions(li);
                    Tds.getInstance().sortieBloc();
                    RESULT = prog ;
                :}
                ;

LDEC        ::= | LDEC DECL
                ;

LFONC       ::= LFONC:lf  FONC:f
                {:
                    lf.ajouter(f);
                    RESULT = lf;
                :}
                |
                FONC:f
                {:
                    BlocDeFonctions lf = new BlocDeFonctions(fleft + 1, fright + 1);
                    lf.ajouter(f);
                    RESULT = lf;
                :}
                ;

LINST       ::= LINST:li INST:i
                {:
                    li.ajouter(i);
                    RESULT = li;
                :}
                |
                INST:i
                {:
                    BlocDInstructions li = new BlocDInstructions(ileft + 1, iright + 1);
                    li.ajouter(i);
                    RESULT = li;
                :}
                ;

LINSTF      ::= LINST
                |
                ;

DECL        ::= TYPE:t IDF:idf POINTVIRGULE
                {:
                    EntreeVar e = new EntreeVar(idf);
                    SymboleVar s = new SymboleVar(t);
                    Tds.getInstance().augmenterTaillePile();
                    Tds.getInstance().ajouter(e, s, tleft + 1, tright);
                :}
                ;

FONC        ::= TYPE:t  IDF:id  PRNT_G PARAM PRNT_D  DEBUT  LINSTF:li  RET:r  FIN
                {:
                    Tds.getInstance().entreeBloc();
                    EntreeFct e = new EntreeFct(id);
                    SymboleFct s = new SymboleFct(t, "__" + id + "__");
                    Tds.getInstance().ajouter(e, s, tleft + 1, tright);
                    Fonction f = new Fonction(e, r, tleft + 1, tright);
                    f.setBlocDInstructions(li);
                    Tds.getInstance().sortieBloc();
                    RESULT = f;
                :}
                ;

PARAM       ::=;

INST        ::= ECRIRE EXP:e POINTVIRGULE
                {:
                    RESULT = new Ecrire(e, eleft + 1, eright);
                :}
                |
                IDF:id EGAL EXP:exp POINTVIRGULE
                {:
                    EntreeVar e = new EntreeVar(id);
                    Idf idf = new Idf(e, idleft+1, idright+1);
                    RESULT = new Affectation(idf, exp, expleft+1, expright+1);
                :}
                ;

RET         ::=  RETOURNE  EXP:e  POINTVIRGULE
                {:
                    RESULT = new Retourne(e, eleft + 1, eright);
                :}
                ;

EXP         ::= CSTENTIERE:c
                {:
                    RESULT = new ConstanteEntiere(c, cleft + 1, cright+1) ;
                :}
                |
                IDF:i
                {:
                    EntreeVar e = new EntreeVar(i);
                    RESULT = new Idf(e, ileft + 1, iright+1) ;
                :}
                |
                CBOOL:c
                {:
                    RESULT = new ConstanteBooleene(c, cleft + 1, cright+1) ;
                :}
                |
                IDF:i PRNT_G PARAM PRNT_D
                {:
                    EntreeFct e = new EntreeFct(i);
                    RESULT = new AppelFonction(e, ileft + 1, iright+1) ;
                :}
                ;

TYPE        ::= ENTIER:e
                {:
                    RESULT = e;
                :}
                |
                BOOLEEN:b
                {:
                    RESULT = b;
                :}
                ;
